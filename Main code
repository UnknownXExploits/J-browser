<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>J Browser - Smart Browser with Seb AI</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #121212;
            color: white;
            display: flex;
            flex-direction: column;
            height: 100vh;
            transition: background-color 0.3s ease;
        }

        /* Tabs Section */
        #tab-bar {
            display: flex;
            justify-content: flex-start;
            background-color: #333;
            padding: 10px;
            border-bottom: 2px solid #444;
            overflow-x: auto;
        }

        .tab {
            margin-right: 10px;
            padding: 10px;
            background-color: #444;
            border-radius: 5px;
            cursor: pointer;
            position: relative;
        }

        .tab .close-btn {
            position: absolute;
            top: 2px;
            right: 2px;
            background: transparent;
            color: white;
            border: none;
            font-size: 14px;
            cursor: pointer;
        }

        /* URL Bar */
        #url-bar {
            display: flex;
            padding: 10px;
            background-color: #333;
            border-bottom: 2px solid #444;
        }

        #url-input {
            flex: 1;
            padding: 10px;
            font-size: 16px;
            border: none;
            background-color: #222;
            color: white;
            border-radius: 5px;
        }

        #search-button {
            padding: 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin-left: 5px;
        }

        /* Webpage Area */
        #webpage-container {
            flex: 1;
            background-color: #1c1c1c;
            overflow-y: auto;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        /* Chatbot Section */
        #chatbot-container {
            background-color: #222;
            padding: 10px;
            color: white;
            border-top: 2px solid #444;
            font-size: 14px;
            height: 100px;
            overflow-y: auto;
        }

        #chatbot-input {
            width: 100%;
            padding: 10px;
            border: none;
            background-color: #333;
            color: white;
            font-size: 14px;
            border-radius: 5px;
        }

        /* Settings Panel */
        #settings {
            position: fixed;
            top: 10px;
            right: 10px;
            background-color: #444;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        #settings-container {
            display: none;
            background-color: #333;
            padding: 10px;
            position: fixed;
            top: 0;
            right: 0;
            height: 100vh;
            width: 250px;
            color: white;
            border-left: 2px solid #444;
        }

        #settings-container label {
            display: block;
            margin-bottom: 10px;
        }

        #settings-container input {
            margin-bottom: 20px;
        }

        #close-settings {
            cursor: pointer;
        }
    </style>
</head>
<body>

    <!-- Settings Button -->
    <div id="settings" onclick="toggleSettings()">⚙️ Settings</div>

    <!-- Settings Panel -->
    <div id="settings-container">
        <div id="close-settings" onclick="toggleSettings()">❌ Close</div>
        <h3>Settings</h3>
        <label for="theme-toggle">Dark Mode:</label>
        <input type="checkbox" id="theme-toggle" onchange="toggleTheme()" checked>
        <label for="ai-toggle">Enable Seb AI:</label>
        <input type="checkbox" id="ai-toggle" onchange="toggleAI()" checked>
    </div>

    <!-- Tab Bar -->
    <div id="tab-bar">
        <div class="tab" onclick="openTab('about:blank')" id="tab-1">Tab 1 <button class="close-btn" disabled>X</button></div>
    </div>

    <!-- URL Bar -->
    <div id="url-bar">
        <input type="text" id="url-input" placeholder="Search or type a URL...">
        <button id="search-button" onclick="performSearch()">Search</button>
        <button onclick="openTab('about:blank')">New Tab</button>
    </div>

    <!-- Webpage Area -->
    <div id="webpage-container">
        <iframe id="webpage" src="about:blank"></iframe>
    </div>

    <!-- Chatbot Section -->
    <div id="chatbot-container">
        <div id="chatbot-messages">SebBot: How can I assist you today?</div>
        <input type="text" id="chatbot-input" placeholder="Ask me anything...">
    </div>

    <script>
        const apiKey = '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';  // Replace with your actual API key
        const webpage = document.getElementById('webpage');
        const urlInput = document.getElementById('url-input');
        const chatbotMessages = document.getElementById('chatbot-messages');
        const chatbotInput = document.getElementById('chatbot-input');
        const tabBar = document.getElementById('tab-bar');
        const settingsContainer = document.getElementById('settings-container');
        const themeToggle = document.getElementById('theme-toggle');
        const aiToggle = document.getElementById('ai-toggle');
        let currentTabId = 1;

        // Open a new tab
        function openTab(url) {
            const tabId = `tab-${currentTabId + 1}`;
            const tab = document.createElement('div');
            tab.className = 'tab';
            tab.textContent = `Tab ${currentTabId + 1}`;
            tab.id = tabId;
            tab.onclick = () => loadTab(url);

            const closeButton = document.createElement('button');
            closeButton.className = 'close-btn';
            closeButton.innerHTML = 'X';
            closeButton.onclick = () => closeTab(tabId);
            tab.appendChild(closeButton);

            tabBar.appendChild(tab);
            loadTab(url);
            currentTabId++;
        }

        // Load URL in the iframe and save search result per tab
        const tabData = {};

        function loadTab(url) {
            const currentTab = `tab-${currentTabId}`;
            tabData[currentTab] = url; // Save search results or state for that tab
            webpage.src = url;
        }

        // Perform Search
        async function performSearch() {
            const query = urlInput.value.trim();
            if (!query) return;

            let result = await searchDuckDuckGo(query);
            webpage.src = result || `https://duckduckgo.com/?q=${query}`;
        }

        // Fetch from DuckDuckGo
        async function searchDuckDuckGo(query) {
            const response = await fetch(`https://api.duckduckgo.com/?q=${query}&format=json`);
            const data = await response.json();
            return data.Abstract || "No relevant information found.";
        }

        // Seb AI Integration (using OpenAI GPT-3)
        async function getSebAIResponse(query) {
            const response = await fetch('https://api.openai.com/v1/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'text-davinci-003',
                    prompt: query,
                    max_tokens: 150,
                    temperature: 0.7,
                })
            });

            const data = await response.json();
            return data.choices[0].text.trim();
        }

        // AI Chatbot Input Handling
        chatbotInput.addEventListener('keydown', async (event) => {
            if (event.key === 'Enter' && aiToggle.checked) {
                const userInput = chatbotInput.value.trim();
                if (userInput) {
                    chatbotMessages.innerHTML += `<br>User: ${userInput}`;
                    chatbotMessages.innerHTML += `<br>SebBot: Thinking...`;

                    const response = await getSebAIResponse(userInput);
                    chatbotMessages.innerHTML = chatbotMessages.innerHTML.replace('Thinking...', `SebBot: ${response}`);
                    handleSpecialCommands(response); // Handle any special commands from AI
                }
            }
        });

        // Handle special commands from AI
        function handleSpecialCommands(response) {
            if (response.toLowerCase().includes("configure my vpn")) {
                if (isUserLoggedIn()) {
                    chatbotMessages.innerHTML += `<br>SebBot: VPN configuration changed successfully!`;
                } else {
                    chatbotMessages.innerHTML += `<br>SebBot: Please log in to configure VPN.`;
                }
            }
        }

        // Toggle between Dark and Light Mode
        function toggleTheme() {
            if (themeToggle.checked) {
                document.body.style.backgroundColor = "#121212";
                document.body.style.color = "white";
            } else {
                document.body.style.backgroundColor = "white";
                document.body.style.color = "black";
            }
        }

        // Toggle Seb AI
        function toggleAI() {
            if (aiToggle.checked) {
                chatbotMessages.innerHTML = "SebBot: How can I assist you today?";
            } else {
                chatbotMessages.innerHTML = "";
            }
        }

        // Toggle Settings Panel
        function toggleSettings() {
            settingsContainer.style.display = settingsContainer.style.display === 'block' ? 'none' : 'block';
        }

        // Close settings panel
        document.getElementById('close-settings').onclick = toggleSettings;

        // Close tab functionality (Cannot close tab 1)
        function closeTab(tabId) {
            if (tabId === 'tab-1') return; // Prevent closing Tab 1

            const tabToClose = document.getElementById(tabId);
            tabBar.removeChild(tabToClose);
            currentTabId--;
        }

        // Dummy function to simulate user login check
        function isUserLoggedIn() {
            return true; // Simulate user being logged in
        }
    </script>

</body>
</html>
